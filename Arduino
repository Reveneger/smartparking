
#include <ESP8266WiFi.h>
#include <ArduinoWebsockets.h>

using namespace websockets;

const char* ssid = "1234567890"; 
const char* password = "1234567890"; 
const char* websocket_server = "ws://localhost:3000"; 

WebsocketsClient client;
const int sensorPins[5] = {2, 3, 4, 5, 6}; 
bool lastOccupancy[5] = {false}; 

void setup() {
  Serial.begin(115200); 
  connectToWifi(); 
  connectToWebsocket(); 

 
  for (int i = 0; i < 5; i++) {
    pinMode(sensorPins[i], INPUT);
  }
}

void loop() {
  bool currentOccupancy[5];

 
  for (int i = 0; i < 5; i++) {
    currentOccupancy[i] = digitalRead(sensorPins[i]) == HIGH;
  }

  
  if (shouldSendUpdate(currentOccupancy)) {
    sendParkingStatus(currentOccupancy);
    memcpy(lastOccupancy, currentOccupancy, sizeof(currentOccupancy));
  }

  client.poll(); 
  delay(1000); 
}

void connectToWifi() {
  Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");
  Serial.println("IP Address: " + WiFi.localIP().toString());
}

void connectToWebsocket() {
  
  client.onEvent(webSocketEvent);
  client.connect(websocket_server);
  Serial.println("Connecting to WebSocket server.");
}

void webSocketEvent(WebsocketsEvent event, String data) {
  
  if(event == WebsocketsEvent::ConnectionOpened) {
    Serial.println("Connnection to server opened");
  } else if(event == WebsocketsEvent::ConnectionClosed) {
    Serial.println("Connnection to server closed");
    client.connect(websocket_server); 
  } else if(event == WebsocketsEvent::GotPing) {
    Serial.println("Received Ping!");
  } else if(event == WebsocketsEvent::GotPong) {
    Serial.println("Received Pong!");
  }
}

bool shouldSendUpdate(bool currentOccupancy[]) {
  for (int i = 0; i < 5; i++) {
    if (currentOccupancy[i] != lastOccupancy[i]) {
      return true;
    }
  }
  return false;
}

void sendParkingStatus(bool currentOccupancy[]) {
  String statusPayload = "{\"status\":[";

  for (int i = 0; i < 5; i++) {
    statusPayload += (currentOccupancy[i] ? "true" : "false");
    if (i < 4) {
      statusPayload += ",";
    }
  }
  statusPayload += "]}";

  client.send(statusPayload);
  Serial.println("Sending parking status: " + statusPayload);
}
